{
    "root": {
        "data": {
            "id": "c6x2jq57gt40",
            "created": 1604756063367,
            "text": "高并发系统设计"
        },
        "children": [
            {
                "data": {
                    "id": "c6x2jv3998o0",
                    "created": 1604756074133,
                    "text": "缓存"
                },
                "children": []
            },
            {
                "data": {
                    "id": "c6x2nam5zo00",
                    "created": 1604756343021,
                    "text": "数据库"
                },
                "children": []
            },
            {
                "data": {
                    "id": "c6x2nfz0cqg0",
                    "created": 1604756354681,
                    "text": "分布式服务"
                },
                "children": [
                    {
                        "data": {
                            "id": "c6x2nu7r38g0",
                            "created": 1604756385685,
                            "text": "服务拆分\n微服务架构"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c6x2o1wv94g0",
                            "created": 1604756402441,
                            "text": "RPC框架"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c6x2o58wik00",
                            "created": 1604756409699,
                            "text": "注册中心与服务治理"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c6x2oahmwcg0",
                            "created": 1604756421111,
                            "text": "分布式Trace"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c6x2okwc1dk0",
                                    "created": 1604756443768,
                                    "text": "链路追踪"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c6x2p2qf0f40",
                                    "created": 1604756482592,
                                    "text": "分布式日志requestId与traceId"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "c6x2pjyahi80",
                                    "created": 1604756520073,
                                    "text": "实现方式AOP切面编程\n\n一般来说，切面编程的实现分为两类：\n- 一类是静态代理，典型的代表是 AspectJ，它的特点是在编译期做切面代码注入；\n- 另一类是动态代理，典型的代表是 Spring AOP，它的特点是在运行期做切面代码注入。",
                                    "font-family": "微软雅黑,Microsoft YaHei"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c6x2r0z2zts0",
                            "created": 1604756635491,
                            "text": "负载均衡"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "c727fopxzw00",
                    "created": 1605277652144,
                    "text": "系统维护"
                },
                "children": [
                    {
                        "data": {
                            "id": "c727fw5qf2g0",
                            "created": 1605277668336,
                            "text": "服务监控",
                            "expandState": "expand"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "c727hfkm50g0",
                                    "created": 1605277788959,
                                    "text": "APM系统\n应用性能管理（Application Performance Management，简称 APM），\n它的含义是：对应用各个层面做全方位的监测，期望及时发现可能存在的问题，并加以解决，从而提升系统的性能和可用性。",
                                    "font-weight": "bold"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "c727fzq017c0",
                            "created": 1605277676092,
                            "text": "如何设计压测"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c727g3fqvsw0",
                            "created": 1605277684179,
                            "text": "配置管理"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c727g5j7y540",
                            "created": 1605277688743,
                            "text": "降级熔断"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "c727g8zz1m80",
                            "created": 1605277696286,
                            "text": "流量控制"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "default",
    "theme": "fresh-blue",
    "version": "1.4.43"
}