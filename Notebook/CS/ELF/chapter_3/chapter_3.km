{
    "root": {
        "data": {
            "id": "cfs4xz1rbdk0",
            "created": 1637160448245,
            "text": "目标文件"
        },
        "children": [
            {
                "data": {
                    "id": "cfs4yt7o0g00",
                    "created": 1637160513906,
                    "text": "3.1、目标文件的格式"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cfs4yzgxxfc0",
                    "created": 1637160527527,
                    "text": "3.2、目标文件是什么样的"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cfs4z6breyg0",
                    "created": 1637160542452,
                    "text": "3.3、分析SimpleSection.o文件"
                },
                "children": [
                    {
                        "data": {
                            "id": "cfy3oylvuv40",
                            "created": 1637766280638,
                            "text": "3.3.1、代码段"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy3p3a9hpk0",
                            "created": 1637766290819,
                            "text": "3.3.2、数据段和只读数据段"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy3pc9ubcg0",
                            "created": 1637766310385,
                            "text": "3.3.3、BBS段"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy3phpjdwo0",
                            "created": 1637766322218,
                            "text": "3.3.4、其他段"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cfs4zgcp8sw0",
                    "created": 1637160564276,
                    "text": "3.4、ELF文件结构描述(readelf指令查看)"
                },
                "children": [
                    {
                        "data": {
                            "id": "cfvkq0kd2oo0",
                            "created": 1637509642262,
                            "text": "3.4.1、文件头\n/usr/include/elf.h"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cfwdurzev1c0",
                                    "created": 1637591827589,
                                    "text": "定义内容：ELF Magic魔数、文件机器字节长度、数据存储方式、版本、运行平台、OS/ABI版本、ELF重定位类型、硬件平台等。"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cfwe7bvnuqg0",
                            "created": 1637592811268,
                            "text": "3.4.2、段表\nreadelf -S *.o"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cfweb6exb4w0",
                                    "created": 1637593112829,
                                    "text": "Elf32_Shdr（段描述符）结构体为元素的数组，数组元素的个数等于段的个数，一个结构体元素对应一个段。\nElf32_Shdr被定义在\"/usr/include/elf.h\"中；"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cfwef62gnls0",
                            "created": 1637593425532,
                            "text": "3.4.3、重定位表",
                            "note": "我们注意到，SimpleSection.0 中有一个叫做“.rel.text” 的段，它的类型(sh_type）为“SEIT_REL”，也就是说它是一个重定位表 ( Relocation Table)。正如我们最开始所说的，链接器在处理目标文件时，须要对目标文件中某些部位进行重定位，即代码段和数据段中那些对绝对地址的弓用的位置。这些重定位的信息都记录在 ELF 文件的重定位表里面，对于每个须要重定位的代码段或数据段，都会有一个相应的重定位表。比如 SimpleSection.。中的“rel.text” 就是针对“text”段的重定位表，因为 “text” 段中至少有一个绝对地址的引用，那就是对“printf”函数的调用；而“data”段则没有对绝对地址的引用，它只包含了几个常量，所以 SimpleSection.o 中没有针对 “data” 段的重定位表 “ reldata”。"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfwefbkgtvs0",
                            "created": 1637593437504,
                            "text": "3.4.4、字符串表",
                            "note": "一般字符串表在 ELF 文件中也以段的形式保存，常见的段名为“.strtab”或“.shstrtab”。这两个字符串表分别为字符串表（String Table）和段表字符串表 (Section Header String Table）。顾名思义，字符串表用来保存普通的字符串，比如符号的名字;段表宇符串表用来保存段表中用到的宇符串，最常见的就是段名(sh_name )。\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cfs4zmegnlk0",
                    "created": 1637160577443,
                    "text": "3.5、链接的接口——符号",
                    "note": "链接过程的本质就是要把多个不同的目标文件之间相互 “粘”到一起，或者说像玩具积木一样，可以拼装形成一个整体。为了使不同目标文件之间能够相互粘合，这些目标文件之间必须有固定的规则才行，就像积木模块必领有四凸部分才能够拼合。在链接中，目标文件之间相互拼合实际上是目标文件之间对地址的引用，即对西数和变量的地址的引用。比如目标文件 B 要用到了目标文件 A 中的函数“foo”，那么我们就称目标文件 A定义 (Detine)了函数 “foo”，称目标文件B 引用 (Reference）子目标文件 A中的函数 “foo”。这两个概念也同样适用于变量。每个函数或交量都有自己独特的名宇，才能避免链接过程中不同变量和函数之间的混淆。在链接中，我们将函数和变量统称为符号(Symbol)，函数名或变量名就是符号名 (Symbol Name )。\n\n我们可以将符号看作是链接中的粘合剂，整个链接过程正是基于符号才能够正确完成。链接过程中很关键的一部分就是符号的管理，每一个目标文件都会有一个相应的符号表(Symbol Table)，这个表里面记录了目标文件中所用到的所有符号。每个定义的符号有一个对应的值，叫做符号值 （Symbol Value），对于变量和函数来说，符号值就是它们的地址。除了函数和变量之外，还存在其他几种不常用到的符号。我们将符号表中所有的符号进行分类，它们有可能是下面这些类型中的一种：\n1、定义在本目标文件的全局符号，可以被其他目标文件引用。比如 SimpleSection.o 里面的“func1”、“main”和“global_init_var”,\n2、在本目标文件中引用的全局符号，却没有定义在本目标文件，这一般叫做外部符号(External Symbol)，也就是我们前面所讲的符号引用。比如 SimpleSection.o 里面的“printf”。\n3、段名，这种符号往往由编译器产生，它的值就是该段的起始地址。比如 SimpleSection.o里面的.text\t、.data等。\n4、局部符号，这类符号只在编译单元内部可见。比如 SimpleSection.o 里面的 “static_var”和“static_var2”。调试器可以使用这些符号来分析程序或崩溃时的核心转储文件。这些局部符号对于链接过程没有作用，链接器往往也忽略它们。\n5、行号信息，即目标文件指令与源代码中代码行的对应关系，它也是可选的。\n对于我们来说，最值得关注的就是全局符号，即上面分类中的第一类和第二类。因为链接过程只关心全局符号的相互 “粘合”，局部符号、段名、行号等都是次要的.\n"
                },
                "children": [
                    {
                        "data": {
                            "id": "cfy42mkejpk0",
                            "created": 1637767351525,
                            "text": "3.5.1、ELF符号表结构",
                            "note": "typedef struct {\n\tElf32_Word st_name;\n    Elf32_Addr st_value;\n    Elf32_Word st_size;\n    unsigned char st_info;\n    unsigned char st_other;\n    Elf32_Half st_shndx;\n} Elf32_Sym;"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy458zgwb40",
                            "created": 1637767557054,
                            "text": "3.5.2、特殊符号"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy45idob480",
                            "created": 1637767577504,
                            "text": "3.5.3、符号修饰与函数签名",
                            "note": "为了防止符号名冲突，C++符号修饰（命名空间）"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy46l2d3940",
                            "created": 1637767661714,
                            "text": "3.5.4、extern\"C\"",
                            "note": "C++为了与C兼容，在符号管理上，C++有一个用来声明或定义一个C的符号的\"extern C\"的关键字；"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cfy47t1zjcg0",
                            "created": 1637767757470,
                            "text": "3.5.5、弱符号与强符号"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cfs4zxie9uw0",
                    "created": 1637160601626,
                    "text": "3.6、调试信息（调试表）"
                },
                "children": [
                    {
                        "data": {
                            "id": "cfy48hqnbdc0",
                            "created": 1637767811204,
                            "text": "Gcc 编译加上“-g”参数",
                            "note": "ELF文件中采用DWATRF（Debug With Arbitray Record Format）的标准的调试信息格式。"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue",
    "version": "1.4.43"
}