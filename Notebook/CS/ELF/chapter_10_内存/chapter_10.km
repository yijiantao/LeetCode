{
    "root": {
        "data": {
            "id": "cgc7953bxxk0",
            "created": 1639198164760,
            "text": "第10章·内存"
        },
        "children": [
            {
                "data": {
                    "id": "cgc79a0fttk0",
                    "created": 1639198175469,
                    "text": "10.1、程序的内存布局",
                    "note": "1、栈：栈用于维扩函数调用的上下文，高开了栈函数调用就没法 实现。在10.2节中将对栈作详细的介绍。栈通常在用户空问的最高地址处分配，通常有数兆宇节的大小。\n2、堆：堆是用来容纳应用程序动态分配的内存区域，当程序使用 malloc 或 new 分配内存时，得到的内存来自堆里。堆会在 10.3 节详细介绍。堆通常存在于栈的下方（低地址方向），在某些时候，堆也可能没有固定统一的存储区域。堆一般比栈大很多，可以有几十至数百兆字节的容量。\n3、可执行文件映像：这里存储着可执行文件在内存里的映像，在第6 章已经提到过，由装载器在装载时将可执行文件的内存读取或映射到这里。在此不再详细说明。\n4、保留区：保留区并不是一个单一的内存区域，而是对内存中受到保护而禁止访问的内存区域的总称，例如，大多数操作系统里，极小的地址通常都是不允许访问的，如 NULL。通常C语言将无效指针赋值为0也是出于这个考虑，因为0址上正常情况下不可能有有效的可访问数据。\n"
                },
                "children": []
            },
            {
                "data": {
                    "id": "cgc79f7nh540",
                    "created": 1639198186789,
                    "text": "10.2、栈与调用惯例"
                },
                "children": [
                    {
                        "data": {
                            "id": "cgdcrdg9ejk0",
                            "created": 1639315259017,
                            "text": "10.2.1、什么是栈"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgdcs7eaaoo0",
                                    "created": 1639315324201,
                                    "text": "栈指针寄存器：esp和ebp",
                                    "note": "esp寄存器：始终定位栈顶，同时也就指向了当前函数的活动记录的顶部；\n\nebp寄存器：指向了函数活动记录的一个固定位置，ebp寄存器又称为帧指针（Frame Pointer）；（栈基）"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgdcrihnh9s0",
                            "created": 1639315269985,
                            "text": "10.2.2、调用惯例（函数调用）",
                            "note": "调用方：\n1、cdecl\n2、stdcall\n3、fastcall\n4、pascal"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cgddssx2wrc0",
                                    "created": 1639318192160,
                                    "text": "函数参数的传递顺序和方式",
                                    "note": "1、从右至左的顺序压参数入栈；\n2、从左至右的顺序压参数入栈；"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgddt0xjb8g0",
                                    "created": 1639318209602,
                                    "text": "栈的维护方式"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cgddt3ixrrs0",
                                    "created": 1639318215249,
                                    "text": "名字修饰（Name-mangling）的策略"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cgdcuattrxk0",
                            "created": 1639315488400,
                            "text": "10.2.3、函数返回值传递",
                            "note": "eax寄存器是返回值的通道。函数将返回值存储在eax中，返回后函数的调用方再读取eax。\n但是eax本身只有4个字节的大小，返回值超过4字节（5～8字节时，需要采用eax和ebx联合返回的方式，eax中存储返回值低4字节、ebx中存储高4字节）；\n"
                        },
                        "children": []
                    }
                ]
            },
            {
                "data": {
                    "id": "cgc79m4wos80",
                    "created": 1639198201861,
                    "text": "10.3、堆与内存管理"
                },
                "children": [
                    {
                        "data": {
                            "id": "cgdcunt3yug0",
                            "created": 1639315516654,
                            "text": "10.3.1、什么是堆"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgdd2wry98g0",
                            "created": 1639316163089,
                            "text": "10.3.2、Linux进程堆管理"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgdd362x5ls0",
                            "created": 1639316183343,
                            "text": "10.3.3、Windows进程堆管理"
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cgdd3oi1zjk0",
                            "created": 1639316223440,
                            "text": "10.3.4、堆分配算法"
                        },
                        "children": []
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "fresh-blue",
    "version": "1.4.43"
}